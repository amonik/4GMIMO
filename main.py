#!/usr/bin/env python

import scipy as sap
import numpy as np 
import random as rd
import math as math
from spatial import *
from symbolgenerate import symbolgenerate


if __name__ == '__main__':
	h00_n = [0.0127537430256120 + 0.867084138708432j,	0.244717009150358 + 0.153756157395963j,	-0.368176103221657 - 0.170063002886990j]
	h01_n = [-0.145110695093904 - 0.936128490419121j,	0.0152287916535847 - 0.221530724499992j,	-0.0793419147710087 + 0.216802717147945j]
	h02_n = [0.709559100535996 - 0.643119914746533j,	0.121336148401776 - 0.217248490519377j,	-0.0961418615915248 + 0.108443685896185j]                  
	h03_n = [-0.488096767680317 + 0.801268547295668j,	-0.232457925019971 - 0.00192358005761645j,	0.246602726948631 - 0.0698352954557114j]       
	h10_n = [-0.836678721887480 - 0.361791696914984j,	-0.303949199755761 - 0.0497806742469521j,	0.272418202009744 + 0.000758971171168600j]
	h11_n = [-0.149918052939380 + 0.884227930570615j,	-0.378425859772158 + 0.110700129219293j,	0.194636394981286 - 0.0481826524476993j]         
	h12_n = [0.958999132484331 + 0.121950329186006j,	0.203375277422449 - 0.0539846474398987j,	-0.132606622849234 + 0.0599034143966676j]             
	h13_n = [-0.810021751418779 - 0.0679473001633233j,	-0.204262435746781 - 0.123322351722634j,	0.279376648159052 + 0.451956933789906j]              
	h20_n = [-0.811216033314624 + 0.543877372352232j,	-0.114797760982942 + 0.149850962653266j,	0.0476823160850550 - 0.0906560033008082j]         
	h21_n = [-0.888157802550711 + 0.421190942401129j,	0.00481658787601581 + 0.166685554879061j,	0.00945825373662038 - 0.0766627387958918j]    
	h22_n = [0.133355309140926 + 0.965052271670745j,	0.0771571361708356 + 0.179652702231417j,	-0.0963445098593852 - 0.0581368455102452j]            
	h23_n = [-0.431342611694212 + 0.867033550324473j,	0.0185087980512584 + 0.174495498306724j,	-0.104706861036753 - 0.142974097884103j]            
	h30_n = [0.241040569016717 - 0.948476091559706j,	0.0451964275775883 - 0.189530347120457j,	-0.0657879600280395 + 0.000150325293824462j]        
	h31_n = [0.799092833769117 - 0.579047000608529j,	0.136477519200786 - 0.00253352823518317j,	-0.0682978851973899 + 0.0534610229059738j]            
	h32_n = [0.555005497308433 - 0.445227737613769j,	0.481102195205537 + 0.184069833685548j,	-0.343790209994447 - 0.331976543183561j]                       
	h33_n = [0.625208542531265 - 0.765624504878776j,	0.0960311087106577 - 0.0783276901576436j,	-0.0413433045794547 + 0.0765958625245658j]
 
	MAXnoisevar = 2e-3
	L = 140 #Number of OFDM symbols in all
	NFFT = 64
	CP = 16 #Cyclic prefix
	BitsPerOFDMSymb = (NFFT - 2)*4
	NumBitsvec=[2480, 2480, 2480 ,2480, 2480, 2480, 2480, 2480]
	Mx=len(NumBitsvec)
	noiseval = 10*np.log10(MAXnoisevar)  #Max noise in dB watts
	
	bins_used = range(-NFFT/2+1,0) + range(1, NFFT/2)
	BinsUsedMatlab = np.array(bins_used[0:31]) + NFFT
	BinsUsedMatlab = BinsUsedMatlab.tolist() + bins_used[31:64]
	spatial.BinsUsedMatlab = BinsUsedMatlab


	noisevec = noiseval - np.dot(range(Mx),2)   #vector of decreasing Noise in dB watts 


	for p in range(Mx):
		noisevar = pow(10,(noisevec[p] / 10))
		NumBits = NumBitsvec[p]
		NumLoops = math.ceil(NumBits /(L*BitsPerOFDMSymb))

	numbers = np.zeros(BitsPerOFDMSymb)
	binary_info = [rd.randint(0,1) for x in range(len(numbers)*L)]

#print binary_info

	a = spatial(h00_n, h01_n, h02_n, h03_n, h10_n, h11_n, h12_n, h13_n, h20_n, h21_n, h22_n, h23_n, h30_n, h31_n, h32_n, h33_n, noisevar, NFFT, CP, L, bins_used)

	symbolgenerate(a,binary_info)









	

	

